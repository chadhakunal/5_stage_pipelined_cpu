$version Generated by VerilatedVcd $end
$date Thu Oct 31 20:07:28 2024
 $end
$timescale   1ps $end

 $scope module TOP $end
  $var wire  1 * clk $end
  $var wire 64 - entry [63:0] $end
  $var wire  1 , hz32768timer $end
  $var wire 64 \ m_axi_acaddr [63:0] $end
  $var wire  1 [ m_axi_acready $end
  $var wire  4 ^ m_axi_acsnoop [3:0] $end
  $var wire  1 Z m_axi_acvalid $end
  $var wire 64 I m_axi_araddr [63:0] $end
  $var wire  2 M m_axi_arburst [1:0] $end
  $var wire  4 O m_axi_arcache [3:0] $end
  $var wire 13 H m_axi_arid [12:0] $end
  $var wire  8 K m_axi_arlen [7:0] $end
  $var wire  1 N m_axi_arlock $end
  $var wire  3 P m_axi_arprot [2:0] $end
  $var wire  1 R m_axi_arready $end
  $var wire  3 L m_axi_arsize [2:0] $end
  $var wire  1 Q m_axi_arvalid $end
  $var wire 64 4 m_axi_awaddr [63:0] $end
  $var wire  2 8 m_axi_awburst [1:0] $end
  $var wire  4 : m_axi_awcache [3:0] $end
  $var wire 13 3 m_axi_awid [12:0] $end
  $var wire  8 6 m_axi_awlen [7:0] $end
  $var wire  1 9 m_axi_awlock $end
  $var wire  3 ; m_axi_awprot [2:0] $end
  $var wire  1 = m_axi_awready $end
  $var wire  3 7 m_axi_awsize [2:0] $end
  $var wire  1 < m_axi_awvalid $end
  $var wire 13 D m_axi_bid [12:0] $end
  $var wire  1 G m_axi_bready $end
  $var wire  2 E m_axi_bresp [1:0] $end
  $var wire  1 F m_axi_bvalid $end
  $var wire 64 T m_axi_rdata [63:0] $end
  $var wire 13 S m_axi_rid [12:0] $end
  $var wire  1 W m_axi_rlast $end
  $var wire  1 Y m_axi_rready $end
  $var wire  2 V m_axi_rresp [1:0] $end
  $var wire  1 X m_axi_rvalid $end
  $var wire 64 > m_axi_wdata [63:0] $end
  $var wire  1 A m_axi_wlast $end
  $var wire  1 C m_axi_wready $end
  $var wire  8 @ m_axi_wstrb [7:0] $end
  $var wire  1 B m_axi_wvalid $end
  $var wire  1 + reset $end
  $var wire 64 1 satp [63:0] $end
  $var wire 64 / stackptr [63:0] $end
  $scope module top $end
   $var wire 32 ` ADDR_WIDTH [31:0] $end
   $var wire 32 ` DATA_WIDTH [31:0] $end
   $var wire 32 _ ID_WIDTH [31:0] $end
   $var wire 32 a STRB_WIDTH [31:0] $end
   $var wire  1 * clk $end
   $var wire 64 - entry [63:0] $end
   $var wire  8 ' ex_mem_ctr [7:0] $end
   $var wire  1 , hz32768timer $end
   $var wire  8 & id_ex_ctr [7:0] $end
   $var wire  8 % if_id_ctr [7:0] $end
   $var wire 64 \ m_axi_acaddr [63:0] $end
   $var wire  1 [ m_axi_acready $end
   $var wire  4 ^ m_axi_acsnoop [3:0] $end
   $var wire  1 Z m_axi_acvalid $end
   $var wire 64 I m_axi_araddr [63:0] $end
   $var wire  2 M m_axi_arburst [1:0] $end
   $var wire  4 O m_axi_arcache [3:0] $end
   $var wire 13 H m_axi_arid [12:0] $end
   $var wire  8 K m_axi_arlen [7:0] $end
   $var wire  1 N m_axi_arlock $end
   $var wire  3 P m_axi_arprot [2:0] $end
   $var wire  1 R m_axi_arready $end
   $var wire  3 L m_axi_arsize [2:0] $end
   $var wire  1 Q m_axi_arvalid $end
   $var wire 64 4 m_axi_awaddr [63:0] $end
   $var wire  2 8 m_axi_awburst [1:0] $end
   $var wire  4 : m_axi_awcache [3:0] $end
   $var wire 13 3 m_axi_awid [12:0] $end
   $var wire  8 6 m_axi_awlen [7:0] $end
   $var wire  1 9 m_axi_awlock $end
   $var wire  3 ; m_axi_awprot [2:0] $end
   $var wire  1 = m_axi_awready $end
   $var wire  3 7 m_axi_awsize [2:0] $end
   $var wire  1 < m_axi_awvalid $end
   $var wire 13 D m_axi_bid [12:0] $end
   $var wire  1 G m_axi_bready $end
   $var wire  2 E m_axi_bresp [1:0] $end
   $var wire  1 F m_axi_bvalid $end
   $var wire 64 T m_axi_rdata [63:0] $end
   $var wire 13 S m_axi_rid [12:0] $end
   $var wire  1 W m_axi_rlast $end
   $var wire  1 Y m_axi_rready $end
   $var wire  2 V m_axi_rresp [1:0] $end
   $var wire  1 X m_axi_rvalid $end
   $var wire 64 > m_axi_wdata [63:0] $end
   $var wire  1 A m_axi_wlast $end
   $var wire  1 C m_axi_wready $end
   $var wire  8 @ m_axi_wstrb [7:0] $end
   $var wire  1 B m_axi_wvalid $end
   $var wire  8 ( mem_wb_ctr [7:0] $end
   $var wire  8 d next_ex_mem_ctr [7:0] $end
   $var wire  8 c next_id_ex_ctr [7:0] $end
   $var wire  8 b next_if_id_ctr [7:0] $end
   $var wire  8 e next_mem_wb_ctr [7:0] $end
   $var wire 64 # pc [63:0] $end
   $var wire  1 + reset $end
   $var wire 64 1 satp [63:0] $end
   $var wire 64 / stackptr [63:0] $end
   $scope module ex_stage $end
    $var wire  1 * clk $end
    $var wire  8 ' ex_mem_ctr [7:0] $end
    $var wire  8 & id_ex_ctr [7:0] $end
    $var wire  1 + reset $end
   $upscope $end
   $scope module id_stage $end
    $var wire  1 * clk $end
    $var wire  8 & id_ex_ctr [7:0] $end
    $var wire  8 % if_id_ctr [7:0] $end
    $var wire  1 + reset $end
   $upscope $end
   $scope module if_stage $end
    $var wire  1 * clk $end
    $var wire  8 % if_id_ctr [7:0] $end
    $var wire  8 ) next_if_id_ctr [7:0] $end
    $var wire  1 + reset $end
   $upscope $end
   $scope module mem_stage $end
    $var wire  1 * clk $end
    $var wire  8 ' ex_mem_ctr [7:0] $end
    $var wire  8 ( mem_wb_ctr [7:0] $end
    $var wire  1 + reset $end
   $upscope $end
   $scope module wb_stage $end
    $var wire  1 * clk $end
    $var wire  8 ( mem_wb_ctr [7:0] $end
    $var wire  1 + reset $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000000000000000000000000000000000000000000000000000000000000000 #
b00000000 %
b00000000 &
b00000000 '
b00000000 (
b00000001 )
1*
1+
0,
b0000000000000000000000000000000000000000000000000000000000000000 -
b0000000000000000000000000000000000111111110000000000000000000000 /
b0000000000000000000000000000000000110100010101100111000000000000 1
b0000000000000 3
b0000000000000000000000000000000000000000000000000000000000000000 4
b00000000 6
b000 7
b00 8
09
b0000 :
b000 ;
0<
0=
b0000000000000000000000000000000000000000000000000000000000000000 >
b00000000 @
0A
0B
0C
b0000000000000 D
b00 E
0F
0G
b0000000000000 H
b0000000000000000000000000000000000000000000000000000000000000000 I
b00000000 K
b000 L
b00 M
0N
b0000 O
b000 P
0Q
0R
b0000000000000 S
b0000000000000000000000000000000000000000000000000000000000000000 T
b00 V
0W
0X
0Y
0Z
0[
b0000000000000000000000000000000000000000000000000000000000000000 \
b0000 ^
b00000000000000000000000000001101 _
b00000000000000000000000001000000 `
b00000000000000000000000000001000 a
b00000000 b
b00000000 c
b00000000 d
b00000000 e
#0
1=
1C
1R
#250
0*
#250
#500
1*
#500
#750
0*
#750
#1000
1*
#1000
#1250
0*
0+
#1250
#1500
b00000001 %
b00000010 )
1*
#1500
1,
#1750
0*
#1750
#2000
b00000010 %
b00000001 &
b00000011 )
1*
#2000
#2250
0*
#2250
#2500
b00000011 %
b00000010 &
b00000001 '
b00000100 )
1*
#2500
#2750
0*
#2750
#3000
b00000100 %
b00000011 &
b00000010 '
b00000001 (
b00000101 )
1*
#3000
#3250
0*
#3250
#3500
b00000101 %
b00000100 &
b00000011 '
b00000010 (
b00000110 )
1*
#3500
#3750
0*
#3750
#4000
b00000110 %
b00000101 &
b00000100 '
b00000011 (
b00000111 )
1*
#4000
#4250
0*
#4250
#4500
b00000111 %
b00000110 &
b00000101 '
b00000100 (
b00001000 )
1*
#4500
#4750
0*
#4750
#5000
b00001000 %
b00000111 &
b00000110 '
b00000101 (
b00001001 )
1*
#5000
#5250
0*
#5250
#5500
b00001001 %
b00001000 &
b00000111 '
b00000110 (
b00001010 )
1*
#5500
